# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:43:29+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity
from pydantic import conint

from models.field_year__month_ import JsonGetResponse

app = MCPProxy(
    description='The Archive API provides lists of NYT articles by month going back to 1851.  You can use it to build your own local database of NYT article metadata.',
    termsOfService='http://developer.nytimes.com/tou',
    title='Archive API',
    version='1.0.0',
    servers=[
        {'url': 'http://api.nytimes.com/svc/archive/v1'},
        {'url': 'https://api.nytimes.com/svc/archive/v1'},
    ],
)


@app.get(
    '/{year}/{month}.json',
    description=""" The Archive API provides lists of NYT articles by month going back to 1851.  Simply pass in the year and month you want and it returns a JSON object with all articles for that month.
 """,
    tags=['archive_data_fetching'],
    security=[
        APIKeyQuery(name="api-key"),
    ],
)
def get__year__month_json(
    year: conint(ge=1851, le=2030) = '2016', month: conint(ge=1, le=12) = '1'
):
    """
    Archive API
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
